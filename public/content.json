{"meta":{"title":"小屋","subtitle":null,"description":null,"author":"x-thanatos","url":"https://x-thanatos.github.io/public"},"pages":[],"posts":[{"title":"npm script usage","slug":"npm-script-usage","date":"2018-05-11T03:30:30.774Z","updated":"2018-05-11T03:32:29.239Z","comments":true,"path":"2018/05/11/npm-script-usage/","link":"","permalink":"https://x-thanatos.github.io/public/2018/05/11/npm-script-usage/","excerpt":"","text":"[TOC] npm script usage 说明，使用npm script之前，开发者请务必理解npm script 官方文档 运行本项目主要使用以下几条命令 serve:hmr:spa:owner-all serve:hmr:spa:distributor-all serve:hmr:spa:vendor-all serve:hmr:spa:renter-all prod:spa:owner-all prod:spa:distributor-all prod:spa:renter-all prod:spa:vendor-all prod:spa:all prod:mpa:all prod:all prod:stats(TODO) 分析: serve和prod代表此命令作用，这里分别表示服务和生产，命令以:分隔参数，类似Linux的pipeline，这里多用于描述可选项或特性。例如: serve:hmr:spa:owner-all表示本地开启spa类型owner-all服务，并且带有hmr特性","categories":[],"tags":[]},{"title":"持续集成设计文档","slug":"ci-development","date":"2018-05-11T03:30:30.769Z","updated":"2018-05-11T03:32:58.995Z","comments":true,"path":"2018/05/11/ci-development/","link":"","permalink":"https://x-thanatos.github.io/public/2018/05/11/ci-development/","excerpt":"","text":"[TOC] 持续集成设计文档 文档信息管理表 标题 内容 名称 name 最近发布版本 2.26.0 操作系统 Windows 7，Windows 10，Ubuntu 16.04+， Mac OS 8.x+ 软件平台 浏览器（Chrome 50+, Firefox 40+） 功能 features 关键字 SPA，MPA，Vue，ES6+，SASS，Flux，WebSocket 创建日期 2018-05-10 文档变更记录表 更 改 人 日 期 内 容 罗 斌 2018-05-10 创建文档","categories":[],"tags":[]},{"title":"架构文档","slug":"architecture","date":"2018-05-11T03:30:30.763Z","updated":"2018-05-11T03:48:55.974Z","comments":true,"path":"2018/05/11/architecture/","link":"","permalink":"https://x-thanatos.github.io/public/2018/05/11/architecture/","excerpt":"","text":"[TOC] 架构文档架构概览图 todo: 未完成 开发模型模块化方案 使用ES2015+语法编写代码 使用Vue 组件规范定义的HTML/Style模块化方案，尽量不要内联模板与样式文件 使用Webpack的3大javascript规范兼容特性，尽量使用ES2015+规范中import/export相关语法进行模块引入/导出 基于职责单一原则独立以下单元 service单元 component单元 pipeline单元 directive单元 common style单元 common module单元 通过预先设置相对地址结合copy-webpack-plugin插件管理拷贝静态资源 使用webpack及相关工具编译成浏览器友好的ES5代码（core-concept: tree-shaking） 使用weback-dev-server及相关工具进行开发（core-concept: hot-module-reload） 组件化方案 整个应用是一个单根组件树 每个逻辑页面尽量设计成一个页面级组件 非页面级组件按功能细分成子组件，抽离跨页面共用子组件 简单组件使用.vue单文件组件编写 vue提供了.vue单文件组件scope style功能，但由于CSSOM性能问题并且便于培养良好的代码命名习惯，开发者应该谨慎使用此特性 复杂组件使用vue-class-component，vue-property-decorator进行细粒度拆分，向typescript平滑过渡 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748// eg:// in user-component.tsimport &#123; Component, Emit, Inject, Model, Prop, Provide, Watch &#125; from 'vue-property-decorator'// html-loader will process these files and output as stringimport template from './user-component.html'// sass-loader will process these files and output as string,then extra it to .css fileimport './user-component.scss'const s = Symbol('baz')@Component(&#123; template, ...&#125;)export class UserComponent extends Vue &#123; @Emit() addToCount(n: number)&#123; this.count += n &#125; @Emit('reset') resetCount()&#123; this.count = 0 &#125; @Inject() foo: string @Inject('bar') bar: string @Inject(s) baz: string @Model('change') checked: boolean @Prop() propA: number @Prop(&#123; default: 'default value' &#125;) propB: string @Prop([String, Boolean]) propC: string | boolean @Provide() foo = 'foo' @Provide('bar') baz = 'bar' @Watch('child') onChildChanged(val: string, oldVal: string) &#123; &#125; @Watch('person', &#123; immediate: true, deep: true &#125;) onPersonChanged(val: Person, oldVal: Person) &#123; &#125; ...&#125; 状态管理（undetermined） 考虑引入vuex-class，向typescript平滑过渡 概念 采用flux设计，详细信息 项目依赖vuex，专为Vue实现的类flux状态管理器 为减小store在整个项目的复杂度以及不必要的数据维护，开发者应当深入理解该状态管理模型。 并不是所有的数据都会交给store来管理（如页面中一次性消费的数据以及一些不需要持续维护管理的数据） 设计哲学 @vuex工作图示| center | 700x0 样式结构 组件样式文件附着于组件文件夹 公共样式模型 主题管理（TODO）12345678910src│└─── core│ │ ...│ └───style│ │ normalize.scss│ │ common.scss│ │ index.scss│ │ ...│ └───other-css-module-folder","categories":[],"tags":[]},{"title":"Git 管理使用指导","slug":"git-management-guide","date":"2018-05-11T03:30:23.845Z","updated":"2018-05-11T03:32:59.213Z","comments":true,"path":"2018/05/11/git-management-guide/","link":"","permalink":"https://x-thanatos.github.io/public/2018/05/11/git-management-guide/","excerpt":"","text":"[TOC] Git 管理使用指导commit 不允许使用 git commit -m &lt;message&gt; 来提交代码 如非特殊情况，不允许跳过提交钩子 commit 信息尽量参考提交模板填写，实在没什么可写，去掉对应部分 概览性规范详见：http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html branch见 Git flow 分支管理模型 merge除非特殊情况，只允许 PR 的合并产生 merge commit rebase 非主体分支未被合并前，请尽量基于主体分支进行rebase，减少分支冲突 若与主体分支发生冲突，请进行interactive rebase revert非特殊情况，不建议生成 revert commit reset适合本地改动的（各类）回滚。不允许对主体分支进行此类操作 push force 不允许使用 git push --force 可以针对当前非主体分支进行 git push --force-with-lease","categories":[],"tags":[]},{"title":"git-flow 开发模型","slug":"git-flow-guide","date":"2018-05-11T03:30:23.840Z","updated":"2018-05-11T03:32:59.076Z","comments":true,"path":"2018/05/11/git-flow-guide/","link":"","permalink":"https://x-thanatos.github.io/public/2018/05/11/git-flow-guide/","excerpt":"","text":"[TOC] git-flow 开发模型参见： https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow http://www.ruanyifeng.com/blog/2015/12/git-workflow.html http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html 本项目定制规范开发人员 被分配到任务时，从develop分支分出特性分支。 特性分支命名格式: feature/name[#***]，如果有分配的 issue，注明 issue id(可选)。样例：feature/batch-update(#657) 特性分支开发完成后，向 develop 分支发起 PR。开发人员相互 review（可由负责人指定审阅者）。持续提交直至 PR 被接受。 一旦 PR 被接受合并，删除该特性分支。（如果未发布前发现隐藏漏洞，另开fix分支进行修复） 开发时难以避免出现需要修复 bug 的情况（非 hotfix）。这时如果 bug 的修复可以独立存在，不影响特性分支的话，需另起修复分支fix/name[#***]，处理方案基本跟特性分支一样。 总的来说，开发人员主要接触 develop 分支、特性分支、修复分支。 开发负责人测试网 当产品进行部署时，将 develop 分支分出 release 分支（打tag），提交到测试网。release 分支冻结所有新特性的增加（特殊情况除外）。 测试网发现的Bug，直接在release分支进行提交。 待release分支稳定后，合并到master（tag: stable），将master分支发布到现网。也合并至 develop 分支，保持 develop 分支的稳定性。而后，删除该release分支。 现网 现网发现的bug，直接在 master 分出 hotfix（格式类似特性分支或者hotfix/issue-***） 分支，进行修复。 master分支稳定后，合并回develop分支，删除所有hotfix分支。 上述只是说明职责的划分，具体职责可以视情况按需分配。 备注各类 IDE 或者 git 管理工具都提供了 git flow 的集成管理。 如： SourceTree, WebStorm, GitKraken, Sublime Text","categories":[],"tags":[]},{"title":"vue style guide","slug":"vue-style-guide","date":"2018-05-11T03:11:38.034Z","updated":"2018-05-11T03:32:19.558Z","comments":true,"path":"2018/05/11/vue-style-guide/","link":"","permalink":"https://x-thanatos.github.io/public/2018/05/11/vue-style-guide/","excerpt":"","text":"vue style guidevue-style-guide","categories":[],"tags":[]},{"title":"SCSS 代码规范","slug":"scss-style-guide","date":"2018-05-11T03:11:38.026Z","updated":"2018-05-11T03:32:59.273Z","comments":true,"path":"2018/05/11/scss-style-guide/","link":"","permalink":"https://x-thanatos.github.io/public/2018/05/11/scss-style-guide/","excerpt":"","text":"[TOC] SCSS 代码规范前言此规范扩展自 Sass Guidelines。 下面的额外规则覆盖上述规范对应部分。 语法使用 .scss 的语法，不要使用 .sass 原本的语法。 SCSS 风格规则变量命名变量名应使用横杠式（例如 $my-variable）代替 camelCased 和 snake_cased 风格。对于仅用在当前文件的变量，可以在变量名之前添加下划线前缀（例如 $_my-variable）。 混合指令（Mixin）为了让代码遵循 DRY 原则（Don’t Repeat Yourself）、增强清晰性或抽象化复杂性，应该使用 mixin，这与那些命名良好的函数的作用是异曲同工的。虽然 mixin 可以不接收参数，但要注意，假如你不压缩负载（比如通过 gzip），这样会导致最终的样式包含不必要的代码重复。 扩展指令应避免使用 @extend 指令，因为它并不直观，而且具有潜在风险，特别是用在嵌套选择器的时候。即便是在顶层占位符选择器使用扩展，如果选择器的顺序最终会改变，也可能会导致问题。（比如，如果它们存在于其他文件，而加载顺序发生了变化）。其实，使用 @extend 所获得的大部分优化效果，gzip 压缩已经帮助你做到了，因此你只需要通过 @mixin 让样式表更符合 DRY 原则就足够了。 嵌套选择器还是CSSOM的性能问题，不要让嵌套选择器的深度超过 3 层！ 1234567.page-container &#123; .content &#123; .profile &#123; // STOP! &#125; &#125;&#125; 当遇到以上情况的时候，你也许是这样写 CSS 的（which is bad！）： 与 HTML 强耦合的（也是脆弱的）-or- 过于具体（强大）-or- 没有重用","categories":[],"tags":[]},{"title":"CSS 代码规范","slug":"css-style-guide","date":"2018-05-11T03:11:38.018Z","updated":"2018-05-11T03:32:59.321Z","comments":true,"path":"2018/05/11/css-style-guide/","link":"","permalink":"https://x-thanatos.github.io/public/2018/05/11/css-style-guide/","excerpt":"","text":"[TOC] CSS 代码规范术语规则我们把一个（或一组）选择器和一组属性称之为 “规则”。举个例子： 1234.listing &#123; font-size: 18px; line-height: 1.2;&#125; 声明块一对花括号和一组属性的组合称之为 “声明块”。举个例子： 1234&#123; font-size: 18px; line-height: 1.2;&#125; 选择器在规则声明中，“选择器” 负责选取 DOM 树中的元素，这些元素将被定义的属性所修饰。选择器可以匹配 HTML 元素，也可以匹配一个元素的类名、ID, 或者元素拥有的属性。以下是选择器的例子： 1234567.my-element-class &#123; /* ... */&#125;[aria-hidden] &#123; /* ... */&#125; 属性最后，属性决定了规则声明里被选择的元素将得到何种样式。属性以键值对形式存在，一个规则声明可以包含一或多个属性定义。以下是属性定义的例子： 1234/* some selector */ &#123; background: #f1f1f1; color: #333;&#125; 通用规则 参阅 html-css-common-style-guide CSS 风格规则CSS 有效性尽可能使用有效的CSS。 除非遇到验证器bug或者是专有的语法，使用有效的CSS代码。 使用诸如 W3C CSS validator 等工具验证测试。 使用有效的CSS代码是一个可衡量CSS代码质量的指标，可帮你找出不起作用、可被删除的CSS代码，从而确保CSS的合理使用。 id 与 class 的命名使用有意义的或者通用的 id 和 class 命名 用能反映出问题中元素的目的或者通用的id、class命名，代替那些很表象的、难懂的命名。 首选特定的或者能反映出元素目的的命名。因为这样容易理解，也不太可能被修改 通用的命名通常作为非特殊元素或与兄弟元素无区别的元素的备选命名。他们常被称为“辅助元素”。 使用功能性或者通用的命名，可减少不必要的文档或者模板变化。 12345678910111213141516/* 不推荐：无意义 */#yee-1901 &#123;&#125;/* 不推荐：表象 */.button-green &#123;&#125;.clear &#123;&#125;/* 推荐：具体的 */#gallery &#123;&#125;#login &#123;&#125;.video &#123;&#125;/* 推荐：通用的 */.aux &#123;&#125;.alt &#123;&#125; id 与 class 的命名风格ID 和 class 命名要尽可能简短，但必要的话就别怕长。 尽可能简洁地传达 id 或者 class 名称的含义。 使用简洁的 id 或者 class 名称有助于提高可读性和代码效率。 1234567/* 不推荐 */#navigation &#123;&#125;.atr &#123;&#125;/* 推荐 */#nav &#123;&#125;.author &#123;&#125; 类型选择器应当避免在 id 和 class 前添加类型选择器。 除了必要情况下（例如辅助的类），不要将元素名称与 id 或 class 结合作为选择器。 避免不必要的祖先选择器是出于 性能原因 的考虑。 1234567/* 不推荐 */ul#example &#123;&#125;div.error &#123;&#125;/* 推荐 */#example &#123;&#125;.error &#123;&#125; ID 选择器在 CSS 中，虽然可以通过 ID 选择元素，但大家通常都会把这种方式列为反面教材。ID 选择器给你的规则声明带来了不必要的高优先级，而且 ID 选择器是不可重用的。 想要了解关于这个主题的更多内容，参见 CSS Wizardry 的文章，文章中有关于如何处理优先级的内容。 再说一遍: 永远不要嵌套 ID 选择器！ 如果你始终坚持要使用 ID 选择器（劝你三思），那也不应该嵌套它们。如果你正打算这么做，你需要先重新检查你的标签，或者指明原因。如果你想要写出风格良好的 HTML 和 CSS，你是不应该这样做的。 JavaScript 钩子避免在 CSS 和 JavaScript 中绑定相同的类。否则开发者在重构时通常会出现以下情况：轻则浪费时间在对照查找每个要改变的类，重则因为害怕破坏功能而不敢作出更改。 我们推荐在创建用于特定 JavaScript 的类名时，添加 .js- 前缀： 1&lt;button class=\"btn btn-primary js-request-to-book\"&gt;Request to Book&lt;/button&gt; Note: 这个规则在 SPA 类型应用中不是必要的。 简写属性尽可能使用简写的属性书写方式。 CSS提供了多种属性 简写 的方式（如 font），即使只显式设置一个值，也应该尽可能地使用。 使用简写属性有助于提高代码效率及可读性。 1234567891011121314/* 不推荐 */border-top-style: none;font-family: palatino, georgia, serif;font-size: 100%;line-height: 1.6;padding-bottom: 2em;padding-left: 1em;padding-right: 1em;padding-top: 0;/* 推荐 */border-top: 0;font: 100%/1.6 palatino, georgia, serif;padding: 0 1em 2em; 0与单位省略“0”后的单位。 除非必需，否则0后不要加单位。 12margin: 0;padding: 0; 前导 “0”省略前导 “0” 值。 在-1至1之间的值无需保留整数位的0。 1font-size: .8em; 无边框在定义无边框样式时，使用 0 代替 none。 1234/* Bad */.foo &#123; border: none;&#125; 1234/* Good */.foo &#123; border: 0;&#125; 十六进制表示法在可能的情况下使用3个字符的十六进制表示法。 对于可用3字符十六进制表示的颜色值，按此规则书写更短、更简洁。 12345/* 不推荐 */color: #eebbcc;/* 推荐 */color: #ebc; 选择器前缀对选择器加上应用特定的前缀（可选） 大型项目中以及嵌入在其它项目或外部网站上的代码需要给 id 和 class 添加前缀（命名空间）。使用短的、独特的标识符，并在其后跟一个破折号。使用命名空间有助于防止命名冲突，可以让维护变得简单，例如在搜索和替换操作时。 12.adw-help &#123;&#125; /* AdWords */#maia-note &#123;&#125; /* Maia */ id 与 class 名称分隔符用连字符分隔 id 和 class 中的单词。 选择器中的词语和缩写中不要使用除了连字符以外的任何字符（包括空字符），以提高可理解性和可读性。 123456789/* 不推荐: 单词未分开 */.demoimage &#123;&#125;/* 不推荐：使用下划线而不是连字符 */.error_status &#123;&#125;/* 推荐 */#video-id &#123;&#125;.ads-sample &#123;&#125; OOCSS 和 BEM出于以下原因，我们鼓励使用 OOCSS 和 BEM 的某种组合： 可以帮助我们理清 CSS 和 HTML 之间清晰且严谨的关系。 可以帮助我们创建出可重用、易装配的组件。 可以减少嵌套，降低特定性。 可以帮助我们创建出可扩展的样式表。 OOCSS，也就是 “Object Oriented CSS（面向对象的CSS）”，是一种写 CSS 的方法，其思想就是鼓励你把样式表看作“对象”的集合：创建可重用性、可重复性的代码段让你可以在整个网站中多次使用。 参考资料： Nicole Sullivan 的 OOCSS wiki Smashing Magazine 的 Introduction to OOCSS BEM，也就是 “Block-Element-Modifier”，是一种用于 HTML 和 CSS 类名的命名约定。BEM 最初是由 Yandex 提出的，要知道他们拥有巨大的代码库和可伸缩性，BEM 就是为此而生的，并且可以作为一套遵循 OOCSS 的参考指导规范。 CSS Trick 的 BEM 101 Harry Roberts 的 introduction to BEM 示例 123456789&lt;article class=\"listing-card listing-card--featured\"&gt; &lt;h1 class=\"listing-card__title\"&gt;Adorable 2BR in the sunny Mission&lt;/h1&gt; &lt;div class=\"listing-card__content\"&gt; &lt;p&gt;Vestibulum id ligula porta felis euismod semper.&lt;/p&gt; &lt;/div&gt;&lt;/article&gt; 1234.listing-card &#123; &#125;.listing-card--featured &#123; &#125;.listing-card__title &#123; &#125;.listing-card__content &#123; &#125; .listing-card 是一个块（block），表示高层次的组件。 .listing-card__title 是一个元素（element），它属于 .listing-card 的一部分，因此块是由元素组成的。 .listing-card--featured 是一个修饰符（modifier），表示这个块与 .listing-card 有着不同的状态或者变化。 Hacks请先尝试其他的方法，避免用户代理检测以及CSS的“hacks”。 进行用户代理检测或使用特殊的CSS选择器及hacks看起来是处理样式差异的捷径。但为了实现和保持高效性以及代码的可维护性，这两种方案应该放到最后考虑。换句话说，用户代理检测和使用hacks会增大项目推进的阻力，所以从项目的长远利益考虑应尽力避免。一旦允许并无顾忌地使用用户代理检测和hacks便很容易滥用，最终一发而不可收。 CSS 格式化规则声明顺序方案一按字母顺序排列声明。 css文件书写按字母顺序排列的方式，容易记忆和维护，以达到一致的代码。 在排序时忽略浏览器特定的前缀。但是，特定CSS属性的多个浏览器前缀应按字母顺序排列（如-moz-书写在-webkit-前面）。 12345678background: fuchsia;border: 1px solid;-moz-border-radius: 4px;-webkit-border-radius: 4px;border-radius: 4px;color: black;text-align: center;text-indent: 2em; 方案2相关的属性声明应当归为一组，并按照下面的顺序排列： Positioning Box model Typographic Visual 由于定位（positioning）可以从正常的文档流中移除元素，并且还能覆盖盒模型（box model）相关的样式，因此排在首位。盒模型排在第二位，因为它决定了组件的尺寸和位置。 其他属性只是影响组件的内部（inside）或者是不影响前两组属性，因此排在后面。 完整的属性列表及其排列顺序请参考 Recess。 1234567891011121314151617181920212223242526272829.declaration-order &#123; /* Positioning */ position: absolute; top: 0; right: 0; bottom: 0; left: 0; z-index: 100; /* Box-model */ display: block; float: right; width: 100px; height: 100px; /* Typography */ font: normal 13px \"Helvetica Neue\", sans-serif; line-height: 1.5; color: #333; text-align: center; /* Visual */ background-color: #f5f5f5; border: 1px solid #e5e5e5; border-radius: 3px; /* Misc */ opacity: 1;&#125; 块内容的缩进缩进所有块级内容。 缩进 块级内容，即嵌套的及声明块中的规则，以体现层级并提高可读性。 12345678@media screen, projection &#123; html &#123; background: #fff; color: #444; &#125;&#125; 声明结束符每个属性后使用分号结束。 以分号结束每个属性，提高一致性和可扩展性。 1234567891011/* 不推荐 */.test &#123; display: block; height: 100px&#125;/* 推荐 */.test &#123; display: block; height: 100px;&#125; CSS 属性名结束符属性名称的冒号后有一个空格。 为保证一致性，在属性名与属性值之间添加一个空格（但是属性名和冒号间没有空格）。 123456789/* 不推荐 */h3 &#123; font-weight:bold;&#125;/* 推荐 */h3 &#123; font-weight: bold;&#125; 声明块分离在选择器和后面的声明块之间使用一个空格。 最后一个选择器与表示 声明块 开始的左大花括号在同行，中间有一个字符空格。 表示开始的左花括号和选择器在同行。表示结束的右花括号放在新的一行。 12345678910111213141516171819/* 不推荐：缺少空格 */#video&#123; margin-top: 1em;&#125;/* 不推荐：不必要的换行符 */#video&#123; margin-top: 1em;&#125;/* 不推荐：右花括号前缺少换行符 */#video &#123; margin-top: 1em;&#125;/* 推荐 */#video &#123; margin-top: 1em;&#125; 选择器及声明分离每个选择器和声明独立成行。 总是让每个选择器和声明单独成行。 如果规则只有一行声明，那么就不必再起行。 123456789101112131415161718/* 不推荐 */a:focus, a:active &#123; position: relative; top: 1px;&#125;/* 推荐 */h1,h2,h3 &#123; font-weight: normal; line-height: 1.2;&#125;/* 推荐 */.icon--home &#123; background-position: 0 0 ; &#125;.icon--person &#123; background-position: -16px 0 ; &#125;.icon--files &#123; background-position: 0 -16px; &#125;.icon--settings &#123; background-position: -16px -16px; &#125; 规则分隔使用空行分隔规则。 始终把一个空行（两个换行符）放在代码块规则之间。 123456789html &#123; background: #fff;&#125;body &#123; margin: auto; width: 50%;&#125; CSS 引号属性选择器和属性值中使用单引号。 在属性选择器及属性值中使用单引号（&#39;&#39;）而不是双引号（&quot;&quot;）。在 url() 中不要使用引号。 特例：如果你确实需要定义 @charset ，由于 不允许使用单引号 ，故请使用双引号。 12345678910111213/* 不推荐 */@import url(\"//www.google.com/css/maia.css\");html &#123; font-family: \"open sans\", arial, sans-serif;&#125;/* 推荐 */@import url(//www.google.com/css/maia.css);html &#123; font-family: 'open sans', arial, sans-serif;&#125; CSS 元规则栏目/模块标题注释项目中的每一个主要栏目都需要附上标题： 12345/*------------------------------------*\\ #SECTION-TITLE\\*------------------------------------*/.selector &#123;&#125; 栏目的标题以#号起头，以便我们更好的搜索。 在标题和下一行代码间加入空行（无论那行代码是评论，Sass 或者 CSS） 如果这个项目中，每个栏目都有自己的文件，那么标题应该在每个文件的顶部。如果一个文件内有几个栏目，每个标题前应插入 5 个空行。额外空格和标题让寻找变得更加简单。 12345678910111213141516171819/*------------------------------------*\\ #A-SECTION\\*------------------------------------*/.selector &#123;&#125;/*------------------------------------*\\ #ANOTHER-SECTION\\*------------------------------------*//** * Comment */.another-selector &#123;&#125; 更详细的注释CSS 带来的认知负担是巨大的。有许多东西需要注意，有很多和项目有关的细节要去记，开发者遇到最糟糕的情况是面对其他人写的代码。记住自己的 class、规则、对象和助手不难，难得是理解其他人的。 CSS 需要更多的评论。 因为 CSS 是声明性的语言，所以单单看 CSS 的话，很难透过字面意思，去辨识其含义 有些 CSS 可能依赖其他地方的代码 改变某段代码的对其他代码的影响 什么地方已经应用了某些样式（代码冗余） 继承了怎样的样式（刻意或者无意） 传递了怎样的样式（刻意或者无意） 原作者想把样式用在哪里 这里甚至没有考量 CSS 的诸多奇异特性，例如多种 overflow 触发的块格式、或者某些 transform 属性触发硬件加速，这对接手的开发者来说更加的麻烦。 因为 CSS 无法很好的描述自己的情况，这是一个非常需要注释的语言。 一个规则是，注释任何一眼不能看穿的代码。意思就是，不需要告诉大家颜色的含义，但是如果使用 overflow: hidden 来去除浮动，而不是用来截去某个元素的 overflow，那么这就值得记录。 顶层设计对于解释整个分段或组件的大块注释来说，使用 DocBlock 级的多行评论，每行 80 字符宽。 这是来自 CSS Wizardry 网站中记录页头的真实例子： 1234567891011/** * The site’s main page-head can have two different states: * * 1) Regular page-head with no backgrounds or extra treatments; it just * contains the logo and nav. * 2) A masthead that has a fluid-height (becoming fixed after a certain point) * which has a large background image, and some supporting text. * * The regular page-head is incredibly simple, but the masthead version has some * slightly intermingled dependency with the wrapper that lives inside it. */ 重要的代码都要这么做。 对象扩展指针当横跨多个部分，或者应用了 OOCSS 的方法时，你通常会发觉相互影响的规则通常不在同一个文件或者地方。 例如，有一个通用的按钮对象，只提供纯粹的结构样式，它还有一个扩展的对象，用来加上装饰效果。用简单的对象扩展指针来记录这种关系。在对象文件中： 12345/** * Extend `.btn &#123;&#125;` in _components.buttons.scss. */.btn &#123;&#125; 在你的主题文件中： 1234567/** * These rules extend `.btn &#123;&#125;` in _objects.buttons.scss. */.btn--positive &#123;&#125;.btn--negative &#123;&#125; 对不熟悉项目多个部分关系的开发者而言，或者希望了解样式继承规则的人来说，这种简单、省事的注释可以节约很多精力。 底层/细节解释有时候我们想评论特定的（某行）声明/规则，可以用反向脚注，以下是一个大型网站头部的脚注例子： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152/** * Large site headers act more like mastheads. They have a faux-fluid-height * which is controlled by the wrapping element inside it. * * 1. Mastheads will typically have dark backgrounds, so we need to make sure * the contrast is okay. This value is subject to change as the background * image changes. * 2. We need to delegate a lot of the masthead’s layout to its wrapper element * rather than the masthead itself: it is to this wrapper that most things * are positioned. * 3. The wrapper needs positioning context for us to lay our nav and masthead * text in. * 4. Faux-fluid-height technique: simply create the illusion of fluid height by * creating space via a percentage padding, and then position everything over * the top of that. This percentage gives us a 16:9 ratio. * 5. When the viewport is at 758px wide, our 16:9 ratio means that the masthead * is currently rendered at 480px high. Let’s… * 6. …seamlessly snip off the fluid feature at this height, and… * 7. …fix the height at 480px. This means that we should see no jumps in height * as the masthead moves from fluid to fixed. This actual value takes into * account the padding and the top border on the header itself. */.page-head--masthead &#123; margin-bottom: 0; background: url(/img/css/masthead.jpg) center center #2e2620; @include vendor(background-size, cover); color: $color-masthead; /* [1] */ border-top-color: $color-masthead; border-bottom-width: 0; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1) inset; @include media-query(lap-and-up) &#123; background-image: url(/img/css/masthead-medium.jpg); &#125; @include media-query(desk) &#123; background-image: url(/img/css/masthead-large.jpg); &#125; &gt; .wrapper &#123; /* [2] */ position: relative; /* [3] */ padding-top: 56.25%; /* [4] */ @media screen and (min-width: 758px) &#123; /* [5] */ padding-top: 0; /* [6] */ height: $header-max-height - double($spacing-unit) - $header-border-width; /* [7] */ &#125; &#125;&#125; Appendix文档参考来源 https://google.github.io/styleguide/htmlcssguide.html#CSS http://cssguidelin.es/#introduction https://github.com/airbnb/css http://codeguide.bootcss.com","categories":[],"tags":[]},{"title":"HTML/CSS 通用规则","slug":"html-css-common-style-guide","date":"2018-05-11T03:11:38.013Z","updated":"2018-05-11T03:32:59.399Z","comments":true,"path":"2018/05/11/html-css-common-style-guide/","link":"","permalink":"https://x-thanatos.github.io/public/2018/05/11/html-css-common-style-guide/","excerpt":"","text":"[TOC] HTML/CSS 通用规则通用风格规则协议尽量使用带 HTTPS 协议的嵌入资源 坚持将 HTTPS 协议（https:）应用到图片以及其他媒体文件，样式表，和脚步，除非对应文件无法通过 HTTPS 获得 12345&lt;!-- Bad --&gt;&lt;script src=\"http://www.google.com/js/gweb/analytics/autotrack.js\"&gt;&lt;/script&gt;&lt;!-- Good --&gt;&lt;script src=\"https://www.google.com/js/gweb/analytics/autotrack.js\"&gt;&lt;/script&gt; 123456789/* Bad */.example &#123; background: url(//www.google.com/images/example);&#125;/* Good */.example &#123; background: url(https://www.google.com/images/example);&#125; 通用格式化规则缩进使用两个空格 不要使用 tab 或者混用 tab 和空格的方式作为缩进。 1234&lt;ul&gt; &lt;li&gt;Fantastic &lt;li&gt;Great&lt;/ul&gt; 123.example &#123; color: blue;&#125; 大小写只使用小写 所有代码只使用小写：包括HTML元素名、元素属性、元素属性值（text/CDATA 例外）、css选择器、css属性和css属性值（除了字符串）。 12345&lt;!-- Bad --&gt;&lt;A HREF=\"/\"&gt;Home&lt;/A&gt;&lt;!-- Good --&gt;&lt;img src=\"google.png\" alt=\"Google\"&gt; 12345/* Bad */color: #E5E5E5;/* Good */color: #e5e5e5; 尾部空格删除多余的尾部空格 尾部空格是多余的，可能会造成混乱的代码比对（diff）。 12345&lt;!-- Bad --&gt;&lt;p&gt;What?_&lt;!-- Good --&gt;&lt;p&gt;Yes please. 通用 Meta 规则编码使用 UTF-8 (no BOM) 编码 确保你的编辑器文档编码为 UTF-8，没有字节顺序标记。 在 HTML 中使用 &lt;meta charset=&quot;utf-8&quot;&gt; 置顶文档编码，在 CSS 中默认就是 UTF-8 编码，不需要特别指定。 （更多编码和指定方式的资料可以参见 Character Sets &amp; Encodings in XHTML, HTML and CSS） 注释根据需要，给代码做注释 用注释解释代码：它实现了什么功能，它的目的是什么，为什么这个方案被使用或更好？ （注释代码不是强制要求，视乎项目性质和复杂程度） 待办事项使用 TODO 关键词标识待办事项 只使用 TODO 关键词标识待办事项，而不用 @@ 等其他格式。 使用 TODO(contact) 的形式附上联系方式（用户名和邮件列表）方便联系。 在冒号后加入待办事项内容，如 TODO: action item 。 12&#123;# TODO(john.doe): revisit centering #&#125;&lt;center&gt;Test&lt;/center&gt; 12345&lt;!-- TODO: remove optional tags --&gt;&lt;ul&gt; &lt;li&gt;Apples&lt;/li&gt; &lt;li&gt;Oranges&lt;/li&gt;&lt;/ul&gt; Note: 上述规范来自 Google HTML/CSS Style Guide 额外规则文件结尾文件结尾必须存在至少一空行","categories":[],"tags":[]},{"title":"JavaScript 代码规范","slug":"javascript-style-guide","date":"2018-05-11T03:11:38.009Z","updated":"2018-05-11T03:32:59.109Z","comments":true,"path":"2018/05/11/javascript-style-guide/","link":"","permalink":"https://x-thanatos.github.io/public/2018/05/11/javascript-style-guide/","excerpt":"","text":"[TOC] JavaScript 代码规范前言此规范扩展自 Airbnb JavaScript Style Guide Google JavaScript Style Guide JavaScript Standard Style","categories":[],"tags":[]},{"title":"HTML 代码规范","slug":"html-style-guide","date":"2018-05-11T03:11:38.001Z","updated":"2018-05-11T03:32:59.036Z","comments":true,"path":"2018/05/11/html-style-guide/","link":"","permalink":"https://x-thanatos.github.io/public/2018/05/11/html-style-guide/","excerpt":"","text":"[TOC] HTML 代码规范通用规则 参阅 html-css-common-style-guide HTML 风格规则文档类型使用 HTML5 HTML5 推荐所有 HTML 文档使用 &lt;!DOCTYPE html&gt;。 （推荐使用 HTML，即 text/html 。不推荐使用 XHTML，及 application/xhtml+xml，其缺少浏览器和工具支持，优化空间比 HTML 小。） 不要闭合空标签，例如：要 &lt;br&gt;，而非 &lt;br /&gt;。尽管 HTML 两者都支持。 有效的 HTML使用有效的 HTML 代码 使用有效的 HTML 代码，否则很难达到性能上的提升。 使用 W3C HTML validator 等工具进行校验。 使用有效的 HTML 代码是重要的质量衡量标准，便于了解技术需求与约束，并可确保正确使用 HTML 代码。 123456789&lt;!-- Bad HTML --&gt;&lt;title&gt;Test&lt;/title&gt;&lt;article&gt;This is only a test.&lt;!-- Good HTML --&gt;&lt;!DOCTYPE html&gt;&lt;meta charset=\"utf-8\"&gt;&lt;title&gt;Test&lt;/title&gt;&lt;article&gt;This is only a test.&lt;/article&gt; 语义化使用 HTML 要符合语义 符合本义地使用元素（标签），比如使用 heading 元素表示标题，使用 p 标签表示段落，使用 a 标签表示锚点等。 语义化地使用 HTML 有助于网页的可访问性，复用性和提高代码效率。 12345&lt;!-- Bad HTML --&gt;&lt;div onclick=\"goToRecommendations();\"&gt;All recommendations&lt;/div&gt;&lt;!-- Good HTML --&gt;&lt;a href=\"recommendations/\"&gt;All recommendations&lt;/a&gt; 多媒体备选内容为多媒体提供备选内容 对于多媒体，如图像，视频，基于 canvas 的动画对象，确保提供备选访问。对于图像，使用有意义的备选文案（ alt ）。对于视频和音频，尽量提供文字稿和文案说明。 提供备选内容对网页可访问性是很重要的：用 @alt 告诉盲人用户图像是关于什么的，给可能没理解视频或音频的内容的用户以提示。 （图像的 alt 属性会产生冗余，对于不是在 CSS 中引用的非内容图像，就不要使用 alt 描述了。） 12345&lt;!-- Bad HTML --&gt;&lt;img src=\"spreadsheet.png\"&gt;&lt;!-- Good HTML --&gt;&lt;img src=\"spreadsheet.png\" alt=\"Spreadsheet screenshot.\"&gt; 关注点分离行为、呈现与结构分离 严格保持结构 （标记），表现 （样式），和行为 （脚本）分离, 并最小化三者的相互作用。 确保文档和模板只包含 HTML 结构，把所有表现都放到样式表里，把所有行为都放到脚本里。 此外，尽量减少三者间的交集，即减少文档与模板中样式表与脚本的外链。 将表现和行为分开维护是很重要的，因为要在 HTML 文档中更改样式和行为花费成本更高。 1234567891011121314151617&lt;!-- Bad HTML --&gt;&lt;!DOCTYPE html&gt;&lt;title&gt;HTML sucks&lt;/title&gt;&lt;link rel=\"stylesheet\" href=\"base.css\" media=\"screen\"&gt;&lt;link rel=\"stylesheet\" href=\"grid.css\" media=\"screen\"&gt;&lt;link rel=\"stylesheet\" href=\"print.css\" media=\"print\"&gt;&lt;h1 style=\"font-size: 1em;\"&gt;HTML sucks&lt;/h1&gt;&lt;p&gt;I’ve read about this on a few sites but now I’m sure: &lt;u&gt;HTML is stupid!!1&lt;/u&gt;&lt;center&gt;I can’t believe there’s no way to control the styling of my website without doing everything all over again!&lt;/center&gt;&lt;!-- Good HTML --&gt;&lt;!DOCTYPE html&gt;&lt;title&gt;My first CSS-only redesign&lt;/title&gt;&lt;link rel=\"stylesheet\" href=\"default.css\"&gt;&lt;h1&gt;My first CSS-only redesign&lt;/h1&gt;&lt;p&gt;I’ve read about this on a few sites but today I’m actually doing it: separating concerns and avoiding anything in the HTML of my website that is presentational.&lt;p&gt;It’s awesome! 实体引用不要使用实体引用 不需要使用类似 &amp;mdash; 、 &amp;rdquo; 和 &amp;#x263a;等的转义符，假如文件和编辑器以及团队之间用的是同一编码（UTF-8）。 例外的只能是，在 HTML 文档中具有特殊含义的字符（例如 &lt; 和 &amp; )，还有 控制字符 或 “不可见” 字符（例如 no-break 空格）。 12345&lt;!-- Bad HTML --&gt;The currency symbol for the Euro is &amp;amp;ldquo;&amp;amp;eur;&amp;amp;rdquo;.&lt;!-- Good HTML --&gt;The currency symbol for the Euro is “€”. [不允许] 可选标签省略可选标签（可选） 为了代码文件的体积和可读性，可以考虑省略可选的标签。HTML5 specification 定义了哪些标签是可以被省略的。 （这种方法可能需要一段时间来建立更详细的规范，因为显然跟开发者通常认为的不一致。考虑到一致性和简洁的原因，省略所有可选标记是有必要的。） 123456789101112131415&lt;!-- Bad HTML --&gt;&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;Spending money, spending bytes&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;Sic.&lt;/p&gt; &lt;/body&gt;&lt;/html&gt;&lt;!-- Good HTML --&gt;&lt;!DOCTYPE html&gt;&lt;title&gt;Saving money, saving bytes&lt;/title&gt;&lt;p&gt;Qed. type 属性在 style 和 scitpt 标签中省略 type 属性 不要在 style 和 scitpt 标签中使用 type 属性（除非标签中引用的不是 CSS 或 JavaScript）， HTML5 默认使用 text/css 和 text/javascript，因此声明引用类型是不必要的，对于较老的浏览器也同样适用。 12345678910111213&lt;!-- Bad HTML --&gt;&lt;link rel=\"stylesheet\" href=\"//www.google.com/css/maia.css\" type=\"text/css\"&gt;&lt;!-- Good HTML --&gt;&lt;link rel=\"stylesheet\" href=\"//www.google.com/css/maia.css\"&gt;&lt;!-- Bad HTML --&gt;&lt;script src=\"//www.google.com/js/gweb/analytics/autotrack.js\" type=\"text/javascript\"&gt;&lt;/script&gt;&lt;!-- Good HTML --&gt;&lt;script src=\"//www.google.com/js/gweb/analytics/autotrack.js\"&gt;&lt;/script&gt; HTML 代码格式规则通用格式每个块级元素、列表元素或表格元素都独占一行，每个子元素都相对于此类父元素进行缩进。 除了元素的样式（as CSS allows elements to assume a different role per display property), 将块元素、列表元素或表格元素都放在新行。 另外，需要缩进块级元素、列表元素或表格元素的子元素。 （如果出现了列表项间的空格问题，可以试着将所有的 li 元素都放在一行。推荐代码校验器抛出警告而不是错误。) 123456789101112131415161718&lt;blockquote&gt; &lt;p&gt;&lt;em&gt;Space&lt;/em&gt;, the final frontier.&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt; &lt;li&gt;Moe &lt;li&gt;Larry &lt;li&gt;Curly&lt;/ul&gt;&lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th scope=\"col\"&gt;Income &lt;th scope=\"col\"&gt;Taxes &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;$ 5.00 &lt;td&gt;$ 4.50&lt;/table&gt; HTML 引号对属性值使用双引号 在属性值的两侧，使用双引号 (&quot;&quot;) 而不是单引号 (&#39;&#39;). 12345&lt;!-- Bad HTML --&gt;&lt;a class='maia-button maia-button-secondary'&gt;Sign in&lt;/a&gt;&lt;!-- Good HTML --&gt;&lt;a class=\"maia-button maia-button-secondary\"&gt;Sign in&lt;/a&gt; Note: 上述规范来自 Google HTML/CSS Style Guide。 Note: 上述带有 [不允许] 标记的是本规范异于 Google 规范之处。 额外补充风格规则元素 id 必须保证页面唯一同一个页面中，不同的元素包含相同的 id，不符合 id 的属性含义。并且使用 document.getElementById 时可能导致难以追查的问题。 在 HTML 标签上设置正确的 lang 属性有助于提高页面的可访问性，如：让语音合成工具确定其所应该采用的发音，令翻译工具确定其翻译语言等。 1&lt;html lang=\"zh-CN\"&gt; 块级元素自关闭标签自关闭的标签不需要关闭。 123456789&lt;!-- Bad HTML --&gt;&lt;br /&gt;&lt;img src=\"image.png\" alt=\"image\" /&gt;&lt;input type=\"text\" name=\"username\" /&gt;&lt;!-- Good HTML --&gt;&lt;br&gt;&lt;img src=\"image.png\" alt=\"image\"&gt;&lt;input type=\"text\" name=\"username\"&gt; 减少冗余标签坚持避免使用冗余的父元素。 1234567&lt;!-- Bad HTML --&gt;&lt;span class=\"avatar\"&gt; &lt;img src=\"assets/img/img.png\" alt=\"Jane Doe\"&gt;&lt;/span&gt;&lt;!-- Good HTML --&gt;&lt;img class=\"avatar\" src=\"assets/img/img.png\" alt=\"Jane Doe\"&gt; 布尔（boolean）型属性布尔型属性可以在声明时不赋值。XHTML 规范要求为其赋值，但是 HTML5 规范不需要。 更多信息请参考 WhatWG section on boolean attributes： 元素的布尔型属性如果有值，就是 true，如果没有值，就是 false。 如果一定要为其赋值的话，请参考 WhatWG 规范： 如果属性存在，其值必须是空字符串或 […] 属性的规范名称，并且不要在首尾添加空白符。 简单来说，就是不用赋值。 代码格式行宽每行不得超过 120 个字符。 过长的代码不容易阅读与维护。但是考虑到 HTML 的特殊性，不做硬性要求。 属性顺序HTML 属性应当按照以下给出的顺序依次排列，确保代码的易读性。 class id, name data-* src, for, type, href, value title, alt role, aria-* class 用于标识高度可复用组件，因此应该排在首位。id 用于标识具体组件，应当谨慎使用（例如，页面内的书签），因此排在第二位。 过多/过长属性的元素 对于 HTML 元素，过长的代码行，必须按属性分行 1234567&lt;!-- Bad HTML --&gt;&lt;a class=\"maia-button maia-button-secondary\" title=\"I'm a very very very very very very very very very very very very long title\" href=\"http://example.com\"&gt;Sign in&lt;/a&gt;&lt;!-- Good HTML --&gt;&lt;a class=\"maia-button maia-button-secondary\" title=\"I'm a very very very very very very very very very very very very long title\" href=\"http://example.com\"&gt;Sign in&lt;/a&gt; HTML 中”=”两侧的空格HTML中 “=” 两侧不能存在空格 12345&lt;!-- Bad HTML --&gt;&lt;link rel = \"stylesheet\" href = \"styles.css\"&gt;&lt;!-- Good HTML --&gt;&lt;link rel=\"stylesheet\" href=\"styles.css\"&gt; 区段分隔利用空行来强调结构 在HTML 中通过加空行来标记含义，以便更容易了解页面结构概况。例如，在区段间加入五行空行： 12345678910111213141516171819&lt;header class=\"page-head\"&gt; ...&lt;/header&gt;&lt;main class=\"page-content\"&gt; ...&lt;/main&gt;&lt;footer class=\"page-foot\"&gt; ...&lt;/footer&gt; 用单行的空行来分割独立但不相关的区段，例如： 1234567891011121314151617&lt;ul class=\"primary-nav\"&gt; &lt;li class=\"primary-nav__item\"&gt; &lt;a href=\"/\" class=\"primary-nav__link\"&gt;Home&lt;/a&gt; &lt;/li&gt; &lt;li class=\"primary-nav__item primary-nav__trigger\"&gt; &lt;a href=\"/about\" class=\"primary-nav__link\"&gt;About&lt;/a&gt; &lt;ul class=\"primary-nav__sub-nav\"&gt; &lt;li&gt;&lt;a href=\"/about/products\"&gt;Products&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"/about/company\"&gt;Company&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt;&lt;/ul&gt; HTML head启用 IE Edge 模式1&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\"&gt; title 标题head 必须包含 title 标签声明标题。 title 必须作为 head 的直接子元素，并紧随 meta charset 声明之后。 favicon保证 favicon 可访问。 1&lt;link rel=\"shortcut icon\" href=\"path/to/favicon.ico\"&gt; 表单使用 button 元素时必须指明 type 属性值button 元素的默认 type 为 submit，如果被置于 form 元素中，点击后将导致表单提交。为显示区分其作用方便理解，必须给出 type 属性。 可访问性额外参考Web Content Accessibility Guidelines (WCAG) 2.0 Microdata所有关键页面（如产品宣传页面）需要包含 microdata. 当新增信息/功能时，请关注这一推荐。 Appendix文档参考来源： http://devdocs.magento.com/guides/v2.0/coding-standards/code-standard-html.html https://github.com/fex-team/styleguide/blob/master/html.md https://contribute.jquery.org/style-guide/html/","categories":[],"tags":[]}]}